(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{192:function(e,t,s){"use strict";s.r(t);var a=s(0),i=Object(a.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"protocol"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#protocol","aria-hidden":"true"}},[e._v("#")]),e._v(" Protocol")]),e._v(" "),s("p",[e._v("The "),s("strong",[e._v("beanstalk protocol")]),e._v(" runs over TCP using ASCII encoding. Clients connect,\nsend commands and data, wait for responses, and close the connection. For each\nconnection, the server processes commands serially in the order in which they\nwere received and sends responses in the same order. All integers in the\nprotocol are formatted in decimal and (unless otherwise indicated)\nnonnegative.")]),e._v(" "),s("p",[e._v("Names, in this protocol, are ASCII strings. They may contain")]),e._v(" "),s("ul",[s("li",[e._v("letters "),s("code",[e._v("A-Z")]),e._v(" and "),s("code",[e._v("a-z")])]),e._v(" "),s("li",[e._v("numerals "),s("code",[e._v("0-9")])]),e._v(" "),s("li",[e._v("hyphen "),s("code",[e._v("-")])]),e._v(" "),s("li",[e._v("plus "),s("code",[e._v("+")])]),e._v(" "),s("li",[e._v("slash "),s("code",[e._v("/")])]),e._v(" "),s("li",[e._v("semicolon "),s("code",[e._v(";")])]),e._v(" "),s("li",[e._v("dot "),s("code",[e._v(".")])]),e._v(" "),s("li",[e._v("dollar-sign "),s("code",[e._v("$")])]),e._v(" "),s("li",[e._v("underscore "),s("code",[e._v("_")])]),e._v(" "),s("li",[e._v("and parentheses "),s("code",[e._v("(")]),e._v(" and "),s("code",[e._v(")")])])]),e._v(" "),s("p",[e._v("but they may not begin with a hyphen. They are terminated by white space\n(either a space char or end of line). Each name must be at least one character\nlong.")]),e._v(" "),s("p",[e._v("The protocol contains two kinds of data: text lines and unstructured chunks of\ndata. Text lines are used for client commands and server responses. Chunks are\nused to transfer job bodies and stats information. Each job body is an opaque\nsequence of bytes. The server never inspects or modifies a job body and always\nsends it back in its original form. It is up to the clients to agree on a\nmeaningful interpretation of job bodies.")]),e._v(" "),s("p",[e._v("The client may issue the "),s("a",{attrs:{href:"#quit"}},[s("code",[e._v("quit")])]),e._v(" command, or simply close the TCP connection\nwhen it no longer has use for the server. However, beanstalkd performs very\nwell with a large number of open connections, so it is usually better for the\nclient to keep its connection open and reuse it as much as possible. This also\navoids the overhead of establishing new TCP connections.")]),e._v(" "),s("p",[e._v("If a client violates the protocol (such as by sending a request that is not\nwell-formed or a command that does not exist) or if the server has an error,\nthe server will reply with one of the following error messages:")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("OUT_OF_MEMORY\\r\\n")]),e._v(" The server cannot allocate enough memory for the job.\nThe client should try again later.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("INTERNAL_ERROR\\r\\n")]),e._v(" This indicates a bug in the server. It should never\nhappen. If it does happen, please open\n"),s("a",{attrs:{href:"https://github.com/beanstalkd/beanstalkd/issues",target:"_blank",rel:"noopener noreferrer"}},[e._v("an issue"),s("OutboundLink")],1),e._v(".")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("BAD_FORMAT\\r\\n")]),e._v(" The client sent a command line that was not well-formed.\nThis can happen if the line does not end with "),s("code",[e._v("\\r\\n")]),e._v(", if non-numeric\ncharacters occur where an integer is expected, if the wrong number of\narguments are present, or if the command line is mal-formed in any other\nway.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("UNKNOWN_COMMAND\\r\\n")]),e._v(" The client sent a command that the server does not\nknow.")])])]),e._v(" "),s("p",[e._v("These error responses will not be listed in this document for individual\ncommands in the following sections, but they are implicitly included in the\ndescription of all commands. Clients should be prepared to receive an error\nresponse after any command.")]),e._v(" "),s("p",[e._v("As a last resort, if the server has a serious error that prevents it from\ncontinuing service to the current client, the server will close the\nconnection.")]),e._v(" "),s("h2",{attrs:{id:"job-lifecycle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#job-lifecycle","aria-hidden":"true"}},[e._v("#")]),e._v(" Job Lifecycle")]),e._v(" "),s("p",[e._v("A job in beanstalk gets created by a client with the "),s("a",{attrs:{href:"#put"}},[s("code",[e._v("put")])]),e._v(" command. During its\nlife it can be in one of four states: "),s("code",[e._v("ready")]),e._v(", "),s("code",[e._v("reserved")]),e._v(", "),s("code",[e._v("delayed")]),e._v(", or\n"),s("code",[e._v("buried")]),e._v(". After the put command, a job typically starts out ready. It waits in\nthe ready queue until a worker comes along and runs the "),s("a",{attrs:{href:"#reserve"}},[s("code",[e._v("reserve")])]),e._v(" command. If\nthis job is next in the queue, it will be reserved for the worker. The worker\nwill execute the job; when it is finished the worker will send a "),s("a",{attrs:{href:"#delete"}},[s("code",[e._v("delete")])]),e._v("\ncommand to delete the job.")]),e._v(" "),s("p",[e._v("Here is a picture of the typical job lifecycle:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" put            reserve               delete\n-----\x3e [READY] ---------\x3e [RESERVED] --------\x3e *poof*\n")])])]),s("p",[e._v("Here is a picture with more possibilities:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" put with delay               release with delay\n----------------\x3e [DELAYED] <------------.\n                      |                   |\n                      | (time passes)     |\n                      |                   |\n put                  v     reserve       |       delete\n-----------------\x3e [READY] ---------\x3e [RESERVED] --------\x3e *poof*\n                     ^  ^                |  |\n                     |   \\  release      |  |\n                     |    `-------------'   |\n                     |                      |\n                     | kick                 |\n                     |                      |\n                     |       bury           |\n                  [BURIED] <---------------'\n                     |\n                     |  delete\n                      `--------\x3e *poof*\n")])])]),s("p",[e._v("The system has one or more tubes. Each tube consists of a ready queue and a\ndelay queue. Each job spends its entire life in one tube. Consumers can show\ninterest in tubes by sending the "),s("a",{attrs:{href:"#watch"}},[s("code",[e._v("watch")])]),e._v(" command; they can show disinterest by\nsending the "),s("a",{attrs:{href:"#ignore"}},[s("code",[e._v("ignore")])]),e._v(" command. This set of interesting tubes is said to be a\nconsumer's "),s("code",[e._v("watch list")]),e._v(". When a client reserves a job, it may come from any of\nthe tubes in its watch list.")]),e._v(" "),s("p",[e._v("When a client connects, its watch list is initially just the tube named\n"),s("code",[e._v("default")]),e._v(". If it submits jobs without having sent a "),s("a",{attrs:{href:"#use"}},[s("code",[e._v("use")])]),e._v(" command, they will\nlive in the tube named "),s("code",[e._v("default")]),e._v(".")]),e._v(" "),s("p",[e._v("Tubes are created on demand whenever they are referenced. If a tube is empty\n(that is, it contains no "),s("code",[e._v("ready")]),e._v(", "),s("code",[e._v("delayed")]),e._v(", or "),s("code",[e._v("buried")]),e._v(" jobs) and no client refers\nto it, it will be deleted.")]),e._v(" "),s("h2",{attrs:{id:"producer-commands"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#producer-commands","aria-hidden":"true"}},[e._v("#")]),e._v(" Producer Commands")]),e._v(" "),s("h3",{attrs:{id:"put"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#put","aria-hidden":"true"}},[e._v("#")]),e._v(" put")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("put")]),e._v(" command is for any process that wants to insert a job into the queue.\nIt comprises a command line followed by the job body:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("put <pri> <delay> <ttr> <bytes>\\r\\n\n<data>\\r\\n\n")])])]),s("p",[e._v("It inserts a job into the client's currently used tube (see the "),s("a",{attrs:{href:"#use"}},[s("code",[e._v("use")])]),e._v(" command\nbelow).")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("<pri>")]),e._v(" is an integer < "),s("code",[e._v("2**32")]),e._v(". Jobs with smaller priority values will be\nscheduled before jobs with larger priorities. The most urgent priority is "),s("code",[e._v("0")]),e._v(";\nthe least urgent priority is "),s("code",[e._v("4,294,967,295")]),e._v(".")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<delay>")]),e._v(" is an integer number of seconds to wait before putting the job in\nthe ready queue. The job will be in the "),s("code",[e._v("delayed")]),e._v(" state during this time.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<ttr>")]),e._v(" -- time to run -- is an integer number of seconds to allow a worker\nto run this job. This time is counted from the moment a worker reserves\nthis job. If the worker does not delete, release, or bury the job within\n"),s("code",[e._v("ttr")]),e._v(" seconds, the job will time out and the server will release the job.\nThe minimum "),s("code",[e._v("ttr")]),e._v(" is "),s("code",[e._v("1")]),e._v(". If the client sends "),s("code",[e._v("0")]),e._v(", the server will silently\nincrease the "),s("code",[e._v("ttr")]),e._v(" to "),s("code",[e._v("1")]),e._v(".")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<bytes>")]),e._v(" is an integer indicating the size of the job body, not including the trailing "),s("code",[e._v("\\r\\n")]),e._v(".\nThis value must be less than "),s("code",[e._v("max-job-size")]),e._v(" (default: "),s("code",[e._v("2**16")]),e._v(").")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<data>")]),e._v(" is the job body -- a sequence of bytes of length "),s("code",[e._v("<bytes>")]),e._v(" from the previous line.")])])]),e._v(" "),s("p",[e._v("After sending the command line and body, the client waits for a reply, which\nmay be:")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("INSERTED <id>\\r\\n")]),e._v(" to indicate success.")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("<id>")]),e._v(" is the integer id of the new job")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("BURIED <id>\\r\\n")]),e._v(" if the server ran out of memory trying to grow the\npriority queue data structure.")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("<id>")]),e._v(" is the integer id of the new job")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("EXPECTED_CRLF\\r\\n")]),e._v(" The job body must be followed by a "),s("code",[e._v("CR-LF")]),e._v(" pair, that is,\n"),s("code",[e._v("\\r\\n")]),e._v(". These two bytes are not counted in the job size given by the client\nin the "),s("a",{attrs:{href:"#put"}},[s("code",[e._v("put")])]),e._v(" command line.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("JOB_TOO_BIG\\r\\n")]),e._v(" The client has requested to put a job with a body larger\nthan "),s("code",[e._v("max-job-size")]),e._v(" bytes.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("DRAINING\\r\\n")]),e._v(" This means that the server has been put into "),s("code",[e._v("drain mode")]),e._v(" and\nis no longer accepting new jobs. The client should try another server or\ndisconnect and try again later. To put the server in drain mode, send the\n"),s("code",[e._v("SIGUSR1")]),e._v(" signal to the process.")])])]),e._v(" "),s("h3",{attrs:{id:"use"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#use","aria-hidden":"true"}},[e._v("#")]),e._v(" use")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("use")]),e._v(" command is for producers. Subsequent put commands will put jobs into\nthe tube specified by this command. If no use command has been issued, jobs\nwill be put into the tube named "),s("code",[e._v("default")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("use <tube>\\r\\n\n")])])]),s("ul",[s("li",[s("code",[e._v("<tube>")]),e._v(" is a name at most 200 bytes. It specifies the tube to use. If the\ntube does not exist, it will be created.")])]),e._v(" "),s("p",[e._v("The only reply is:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("USING <tube>\\r\\n\n")])])]),s("ul",[s("li",[s("code",[e._v("<tube>")]),e._v(" is the name of the tube now being used.")])]),e._v(" "),s("h2",{attrs:{id:"worker-commands"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-commands","aria-hidden":"true"}},[e._v("#")]),e._v(" Worker Commands")]),e._v(" "),s("p",[e._v("A process that wants to consume jobs from the queue uses "),s("a",{attrs:{href:"#reserve"}},[s("code",[e._v("reserve")])]),e._v(", "),s("a",{attrs:{href:"#delete"}},[s("code",[e._v("delete")])]),e._v(",\n"),s("a",{attrs:{href:"#release"}},[s("code",[e._v("release")])]),e._v(", and "),s("a",{attrs:{href:"#bury"}},[s("code",[e._v("bury")])]),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"reserve"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reserve","aria-hidden":"true"}},[e._v("#")]),e._v(" reserve")]),e._v(" "),s("p",[e._v("The first worker command, "),s("code",[e._v("reserve")]),e._v(", looks like this:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("reserve\\r\\n\n")])])]),s("p",[e._v("Alternatively, you can specify a timeout as follows:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("reserve-with-timeout <seconds>\\r\\n\n")])])]),s("p",[e._v("This will return a newly reserved job. If no job is available to be reserved,\nbeanstalkd will wait to send a response until one becomes available. Once a\njob is reserved for the client, the client has limited time to run ("),s("code",[e._v("TTR")]),e._v(") the\njob before the job times out. When the job times out, the server will put the\njob back into the ready queue. Both the "),s("code",[e._v("TTR")]),e._v(" and the actual time left can be\nfound in response to the "),s("a",{attrs:{href:"#stats-job"}},[s("code",[e._v("stats-job")])]),e._v(" command.")]),e._v(" "),s("p",[e._v("If more than one job is ready, beanstalkd will choose the one with the\nsmallest priority value. Within each priority, it will choose the one that\nwas received first.")]),e._v(" "),s("p",[e._v("A timeout value of "),s("code",[e._v("0")]),e._v(" will cause the server to immediately return either a\nresponse or "),s("code",[e._v("TIMED_OUT")]),e._v(".  A positive value of timeout will limit the amount of\ntime the client will block on the reserve request until a job becomes\navailable.")]),e._v(" "),s("p",[e._v("During the "),s("code",[e._v("TTR")]),e._v(" of a reserved job, the last second is kept by the server as a\nsafety margin, during which the client will not be made to wait for another\njob. If the client issues a reserve command during the safety margin, or if\nthe safety margin arrives while the client is waiting on a reserve command,\nthe server will respond with:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("DEADLINE_SOON\\r\\n\n")])])]),s("p",[e._v("This gives the client a chance to delete or release its reserved job before\nthe server automatically releases it.")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("TIMED_OUT\\r\\n\n")])])]),s("p",[e._v("If a non-negative timeout was specified and the timeout exceeded before a job\nbecame available, or if the client's connection is half-closed, the server\nwill respond with "),s("code",[e._v("TIMED_OUT")]),e._v(".")]),e._v(" "),s("p",[e._v("Otherwise, the only other response to this command is a successful reservation\nin the form of a text line followed by the job body:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("RESERVED <id> <bytes>\\r\\n\n<data>\\r\\n\n")])])]),s("ul",[s("li",[s("p",[s("code",[e._v("<id>")]),e._v(" is the job id -- an integer unique to this job in this instance of\nbeanstalkd.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<bytes>")]),e._v(" is an integer indicating the size of the job body, not including\nthe trailing "),s("code",[e._v("\\r\\n")]),e._v(".")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<data>")]),e._v(" is the job body -- a sequence of bytes of length "),s("code",[e._v("<bytes>")]),e._v(" from the\nprevious line. This is a verbatim copy of the bytes that were originally\nsent to the server in the "),s("a",{attrs:{href:"#put"}},[s("code",[e._v("put")])]),e._v(" command for this job.")])])]),e._v(" "),s("h3",{attrs:{id:"delete"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#delete","aria-hidden":"true"}},[e._v("#")]),e._v(" delete")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("delete")]),e._v(" command removes a job from the server entirely. It is normally used\nby the client when the job has successfully run to completion. A client can\ndelete jobs that it has reserved, ready jobs, delayed jobs, and jobs that are\n"),s("code",[e._v("buried")]),e._v(". The "),s("code",[e._v("delete")]),e._v(" command looks like this:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("delete <id>\\r\\n\n")])])]),s("ul",[s("li",[s("code",[e._v("<id>")]),e._v(" is the job id to delete.")])]),e._v(" "),s("p",[e._v("The client then waits for one line of response, which may be:")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("DELETED\\r\\n")]),e._v(" to indicate success.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("NOT_FOUND\\r\\n")]),e._v(" if the job does not exist or is not either reserved by the\nclient, ready, or buried. This could happen if the job timed out before the\nclient sent the delete command.")])])]),e._v(" "),s("h3",{attrs:{id:"release"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#release","aria-hidden":"true"}},[e._v("#")]),e._v(" release")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("release")]),e._v(" command puts a reserved job back into the ready queue (and marks\nits state as "),s("code",[e._v("ready")]),e._v(") to be run by any client. It is normally used when the job\nfails because of a transitory error. It looks like this:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("release <id> <pri> <delay>\\r\\n\n")])])]),s("ul",[s("li",[s("p",[s("code",[e._v("<id>")]),e._v(" is the job id to release.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<pri>")]),e._v(" is a new priority to assign to the job.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<delay>")]),e._v(" is an integer number of seconds to wait before putting the job in\nthe ready queue. The job will be in the "),s("code",[e._v("delayed")]),e._v(" state during this time.")])])]),e._v(" "),s("p",[e._v("The client expects one line of response, which may be:")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("RELEASED\\r\\n")]),e._v(" to indicate success.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("BURIED\\r\\n")]),e._v(" if the server ran out of memory trying to grow the priority\nqueue data structure.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("NOT_FOUND\\r\\n")]),e._v(" if the job does not exist or is not reserved by the client.")])])]),e._v(" "),s("h3",{attrs:{id:"bury"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bury","aria-hidden":"true"}},[e._v("#")]),e._v(" bury")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("bury")]),e._v(" command puts a job into the "),s("code",[e._v("buried")]),e._v(" state. Buried jobs are put into a\nFIFO linked list and will not be touched by the server again until a client\nkicks them with the "),s("a",{attrs:{href:"#kick"}},[s("code",[e._v("kick")])]),e._v(" command.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("bury")]),e._v(" command looks like this:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("bury <id> <pri>\\r\\n\n")])])]),s("ul",[s("li",[s("p",[s("code",[e._v("<id>")]),e._v(" is the job id to release.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<pri>")]),e._v(" is a new priority to assign to the job.")])])]),e._v(" "),s("p",[e._v("There are two possible responses:")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("BURIED\\r\\n")]),e._v(" to indicate success.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("NOT_FOUND\\r\\n")]),e._v(" if the job does not exist or is not reserved by the client.")])])]),e._v(" "),s("h3",{attrs:{id:"touch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#touch","aria-hidden":"true"}},[e._v("#")]),e._v(" touch")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("touch")]),e._v(" command allows a worker to request more time to work on a job.\nThis is useful for jobs that potentially take a long time, but you still want\nthe benefits of a "),s("code",[e._v("TTR")]),e._v(" pulling a job away from an unresponsive worker.  A worker\nmay periodically tell the server that it's still alive and processing a job\n(e.g. it may do this on "),s("code",[e._v("DEADLINE_SOON")]),e._v("). The command postpones the auto\nrelease of a reserved job until "),s("code",[e._v("TTR")]),e._v(" seconds from when the command is issued.")]),e._v(" "),s("p",[e._v("The touch command looks like this:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("touch <id>\\r\\n\n")])])]),s("ul",[s("li",[s("code",[e._v("<id>")]),e._v(" is the ID of a job reserved by the current connection.")])]),e._v(" "),s("p",[e._v("There are two possible responses:")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("TOUCHED\\r\\n")]),e._v(" to indicate success.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("NOT_FOUND\\r\\n")]),e._v(" if the job does not exist or is not reserved by the client.")])])]),e._v(" "),s("h3",{attrs:{id:"watch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#watch","aria-hidden":"true"}},[e._v("#")]),e._v(" watch")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("watch")]),e._v(" command adds the named tube to the watch list for the current\nconnection. A reserve command will take a job from any of the tubes in the\nwatch list. For each new connection, the watch list initially consists of one\ntube, named "),s("code",[e._v("default")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("watch <tube>\\r\\n\n")])])]),s("ul",[s("li",[s("code",[e._v("<tube>")]),e._v(" is a name at most 200 bytes. It specifies a tube to add to the watch\nlist. If the tube doesn't exist, it will be created.")])]),e._v(" "),s("p",[e._v("The reply is:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("WATCHING <count>\\r\\n\n")])])]),s("ul",[s("li",[s("code",[e._v("<count>")]),e._v(" is the integer number of tubes currently in the watch list.")])]),e._v(" "),s("h3",{attrs:{id:"ignore"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ignore","aria-hidden":"true"}},[e._v("#")]),e._v(" ignore")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("ignore")]),e._v(" command is for consumers. It removes the named tube from the\n"),s("code",[e._v("watch list")]),e._v(" for the current connection.")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("ignore <tube>\\r\\n\n")])])]),s("p",[e._v("The reply is one of:")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("WATCHING <count>\\r\\n")]),e._v(" to indicate success.")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("<count>")]),e._v(" is the integer number of tubes currently in the "),s("code",[e._v("watch list")]),e._v(".")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("NOT_IGNORED\\r\\n")]),e._v(" if the client attempts to ignore the only tube in its\n"),s("code",[e._v("watch list")]),e._v(".")])])]),e._v(" "),s("h2",{attrs:{id:"other-commands"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#other-commands","aria-hidden":"true"}},[e._v("#")]),e._v(" Other Commands")]),e._v(" "),s("h3",{attrs:{id:"peek"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#peek","aria-hidden":"true"}},[e._v("#")]),e._v(" peek")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("peek")]),e._v(" commands let the client inspect a job in the system. There are four\nvariations. All but the first operate only on the currently used tube.")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("peek <id>\\r\\n")]),e._v(" - return job "),s("code",[e._v("<id>")]),e._v(".")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("peek-ready\\r\\n")]),e._v(" - return the next ready job.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("peek-delayed\\r\\n")]),e._v(" - return the delayed job with the shortest delay left.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("peek-buried\\r\\n")]),e._v(" - return the next job in the list of buried jobs.")])])]),e._v(" "),s("p",[e._v("There are two possible responses, either a single line:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("NOT_FOUND\\r\\n")]),e._v(" if the requested job doesn't exist or there are no jobs in\nthe requested state.")])]),e._v(" "),s("p",[e._v("Or a line followed by a chunk of data, if the command was successful:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("FOUND <id> <bytes>\\r\\n\n<data>\\r\\n\n")])])]),s("ul",[s("li",[s("p",[s("code",[e._v("<id>")]),e._v(" is the job id.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<bytes>")]),e._v(" is an integer indicating the size of the job body, not including\nthe trailing "),s("code",[e._v("\\r\\n")]),e._v(".")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<data>")]),e._v(" is the job body -- a sequence of bytes of length "),s("code",[e._v("<bytes>")]),e._v(" from the\nprevious line.")])])]),e._v(" "),s("h3",{attrs:{id:"kick"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kick","aria-hidden":"true"}},[e._v("#")]),e._v(" kick")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("kick")]),e._v(" command applies only to the currently used tube. It moves jobs into\nthe "),s("code",[e._v("ready")]),e._v(" queue. If there are any buried jobs, it will only kick "),s("code",[e._v("buried")]),e._v(" jobs.\nOtherwise it will kick "),s("code",[e._v("delayed")]),e._v(" jobs. It looks like:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("kick <bound>\\r\\n\n")])])]),s("ul",[s("li",[s("code",[e._v("<bound>")]),e._v(" is an integer upper bound on the number of jobs to kick. The server\nwill kick no more than "),s("code",[e._v("<bound>")]),e._v(" jobs.")])]),e._v(" "),s("p",[e._v("The response is of the form:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("KICKED <count>\\r\\n\n")])])]),s("ul",[s("li",[s("code",[e._v("<count>")]),e._v(" is an integer indicating the number of jobs actually kicked.")])]),e._v(" "),s("h3",{attrs:{id:"kick-job"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kick-job","aria-hidden":"true"}},[e._v("#")]),e._v(" kick-job")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("kick-job")]),e._v(" command is a variant of "),s("code",[e._v("kick")]),e._v(" that operates with a single job\nidentified by its job id. If the given job id exists and is in a "),s("code",[e._v("buried")]),e._v(" or\n"),s("code",[e._v("delayed")]),e._v(" state, it will be moved to the ready queue of the the same tube where it\ncurrently belongs. The syntax is:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("kick-job <id>\\r\\n\n")])])]),s("ul",[s("li",[s("code",[e._v("<id>")]),e._v(" is the job id to kick.")])]),e._v(" "),s("p",[e._v("The response is one of:")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("NOT_FOUND\\r\\n")]),e._v(" if the job does not exist or is not in a kickable state. This\ncan also happen upon internal errors.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("KICKED\\r\\n")]),e._v(" when the operation succeeded.")])])]),e._v(" "),s("h3",{attrs:{id:"stats-job"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-job","aria-hidden":"true"}},[e._v("#")]),e._v(" stats-job")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("stats-job")]),e._v(" command gives statistical information about the specified job if\nit exists. Its form is:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("stats-job <id>\\r\\n\n")])])]),s("ul",[s("li",[s("code",[e._v("<id>")]),e._v(" is a job id.")])]),e._v(" "),s("p",[e._v("The response is one of:")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("NOT_FOUND\\r\\n")]),e._v(" if the job does not exist.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("OK <bytes>\\r\\n<data>\\r\\n")])]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("<bytes>")]),e._v(" is the size of the following data section in bytes.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<data>")]),e._v(" is a sequence of bytes of length "),s("code",[e._v("<bytes>")]),e._v(" from the previous line. It\nis a YAML file with statistical information represented a dictionary.")])])])])]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("stats-job")]),e._v(" data is a YAML file representing a single dictionary of strings\nto scalars. It contains these keys:")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("id")]),e._v(" is the job id")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("tube")]),e._v(" is the name of the tube that contains this job")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("state")]),e._v(" is "),s("code",[e._v("ready")]),e._v(" or "),s("code",[e._v("delayed")]),e._v(" or "),s("code",[e._v("reserved")]),e._v(" or "),s("code",[e._v("buried")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("pri")]),e._v(" is the priority value set by the "),s("a",{attrs:{href:"#put"}},[s("code",[e._v("put")])]),e._v(", "),s("a",{attrs:{href:"#release"}},[s("code",[e._v("release")])]),e._v(", or "),s("a",{attrs:{href:"#bury"}},[s("code",[e._v("bury")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("age")]),e._v(" is the time in seconds since the "),s("a",{attrs:{href:"#put"}},[s("code",[e._v("put")])]),e._v(" command that created this job.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("delay")]),e._v(" is the integer number of seconds to wait before putting this job in\nthe "),s("code",[e._v("ready")]),e._v(" queue.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("ttr")]),e._v(" -- time to run -- is the integer number of seconds a worker is\nallowed to run this job.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("time-left")]),e._v(" is the number of seconds left until the server puts this job\ninto the "),s("code",[e._v("ready")]),e._v(" queue. This number is only meaningful if the job is\nreserved or delayed. If the job is reserved and this amount of time\nelapses before its state changes, it is considered to have timed out.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("file")]),e._v(" is the number of the earliest binlog file containing this job.\nIf "),s("code",[e._v("-b")]),e._v(" wasn't used, this will be "),s("code",[e._v("0")]),e._v(".")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("reserves")]),e._v(" is the number of times this job has been reserved.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("timeouts")]),e._v(" is the number of times this job has timed out during a\nreservation.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("releases")]),e._v(" is the number of times a client has released this job from a\nreservation.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("buries")]),e._v(" is the number of times this job has been buried.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("kicks")]),e._v(" is the number of times this job has been kicked.")])])]),e._v(" "),s("h3",{attrs:{id:"stats-tube"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-tube","aria-hidden":"true"}},[e._v("#")]),e._v(" stats-tube")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("stats-tube")]),e._v(" command gives statistical information about the specified tube\nif it exists. Its form is:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("stats-tube <tube>\\r\\n\n")])])]),s("ul",[s("li",[s("code",[e._v("<tube>")]),e._v(" is a name at most 200 bytes. Stats will be returned for this tube.")])]),e._v(" "),s("p",[e._v("The response is one of:")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("NOT_FOUND\\r\\n")]),e._v(" if the tube does not exist.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("OK <bytes>\\r\\n<data>\\r\\n")])]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("<bytes>")]),e._v(" is the size of the following data section in bytes.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<data>")]),e._v(" is a sequence of bytes of length "),s("code",[e._v("<bytes>")]),e._v(" from the previous line. It\nis a YAML file with statistical information represented a dictionary.")])])])])]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("stats-tube")]),e._v(" data is a YAML file representing a single dictionary of strings\nto scalars. It contains these keys:")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("name")]),e._v(" is the tube's name.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-jobs-urgent")]),e._v(" is the number of ready jobs with priority < "),s("code",[e._v("1024")]),e._v(" in\nthis tube.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-jobs-ready")]),e._v(" is the number of jobs in the ready queue in this tube.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-jobs-reserved")]),e._v(" is the number of jobs reserved by all clients in\nthis tube.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-jobs-delayed")]),e._v(" is the number of delayed jobs in this tube.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-jobs-buried")]),e._v(" is the number of buried jobs in this tube.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("total-jobs")]),e._v(" is the cumulative count of jobs created in this tube in\nthe current beanstalkd process.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-using")]),e._v(" is the number of open connections that are currently\nusing this tube.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-waiting")]),e._v(" is the number of open connections that have issued a\nreserve command while watching this tube but not yet received a response.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-watching")]),e._v(" is the number of open connections that are currently\nwatching this tube.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("pause")]),e._v(" is the number of seconds the tube has been paused for.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-delete")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#delete"}},[s("code",[e._v("delete")])]),e._v(" commands for this tube")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-pause-tube")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#pause-tube"}},[s("code",[e._v("pause-tube")])]),e._v(" commands for this\ntube.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("pause-time-left")]),e._v(" is the number of seconds until the tube is un-paused.")])])]),e._v(" "),s("h3",{attrs:{id:"stats"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats","aria-hidden":"true"}},[e._v("#")]),e._v(" stats")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("stats")]),e._v(" command gives statistical information about the system as a whole.\nIts form is:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("stats\\r\\n\n")])])]),s("p",[e._v("The server will respond:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("OK <bytes>\\r\\n\n<data>\\r\\n\n")])])]),s("ul",[s("li",[s("p",[s("code",[e._v("<bytes>")]),e._v(" is the size of the following data section in bytes.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<data>")]),e._v(" is a sequence of bytes of length "),s("code",[e._v("<bytes>")]),e._v(" from the previous line. It\nis a YAML file with statistical information represented a dictionary.")])])]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("stats")]),e._v(" data for the system is a YAML file representing a single dictionary\nof strings to scalars. Entries described as "),s("code",[e._v("cumulative")]),e._v(" are reset when the\nbeanstalkd process starts; they are not stored on disk with the "),s("code",[e._v("-b")]),e._v(" flag.")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("current-jobs-urgent")]),e._v(" is the number of ready jobs with priority < "),s("code",[e._v("1024")]),e._v(".")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-jobs-ready")]),e._v(" is the number of jobs in the "),s("code",[e._v("ready")]),e._v(" queue.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-jobs-reserved")]),e._v(" is the number of jobs reserved by all clients.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-jobs-delayed")]),e._v(" is the number of "),s("code",[e._v("delayed")]),e._v(" jobs.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-jobs-buried")]),e._v(" is the number of "),s("code",[e._v("buried")]),e._v(" jobs.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-put")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#put"}},[s("code",[e._v("put")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-peek")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#peek"}},[s("code",[e._v("peek")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-peek-ready")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#peek"}},[s("code",[e._v("peek-ready")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-peek-delayed")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#peek"}},[s("code",[e._v("peek-delayed")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-peek-buried")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#peek"}},[s("code",[e._v("peek-buried")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-reserve")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#reserve"}},[s("code",[e._v("reserve")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-use")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#use"}},[s("code",[e._v("use")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-watch")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#watch"}},[s("code",[e._v("watch")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-ignore")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#ignore"}},[s("code",[e._v("ignore")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-delete")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#delete"}},[s("code",[e._v("delete")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-release")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#release"}},[s("code",[e._v("release")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-bury")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#bury"}},[s("code",[e._v("bury")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-kick")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#kick"}},[s("code",[e._v("kick")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-stats")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#stats"}},[s("code",[e._v("stats")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-stats-job")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#stats-job"}},[s("code",[e._v("stats-job")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-stats-tube")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#stats-tube"}},[s("code",[e._v("stats-tube")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-list-tubes")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#list-tubes"}},[s("code",[e._v("list-tubes")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-list-tube-used")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#list-tube-used"}},[s("code",[e._v("list-tube-used")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-list-tubes-watched")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#list-tubes-watched"}},[s("code",[e._v("list-tubes-watched")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("cmd-pause-tube")]),e._v(" is the cumulative number of "),s("a",{attrs:{href:"#pause-tube"}},[s("code",[e._v("pause-tube")])]),e._v(" commands.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("job-timeouts")]),e._v(" is the cumulative count of times a job has timed out.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("total-jobs")]),e._v(" is the cumulative count of jobs created.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("max-job-size")]),e._v(" is the maximum number of bytes in a job.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-tubes")]),e._v(" is the number of currently existing tubes.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-connections")]),e._v(" is the number of currently open connections.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-producers")]),e._v(" is the number of open connections that have each\nissued at least one put command.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-workers")]),e._v(" is the number of open connections that have each issued\nat least one "),s("a",{attrs:{href:"#reserve"}},[s("code",[e._v("reserve")])]),e._v(" command.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("current-waiting")]),e._v(" is the number of open connections that have issued a\n"),s("a",{attrs:{href:"#reserve"}},[s("code",[e._v("reserve")])]),e._v(" command but not yet received a response.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("total-connections")]),e._v(" is the cumulative count of connections.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("pid")]),e._v(" is the process id of the server.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("version")]),e._v(" is the version string of the server.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("rusage-utime")]),e._v(" is the cumulative user CPU time of this process in seconds\nand microseconds.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("rusage-stime")]),e._v(" is the cumulative system CPU time of this process in\nseconds and microseconds.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("uptime")]),e._v(" is the number of seconds since this server process started running.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("binlog-oldest-index")]),e._v(" is the index of the oldest binlog file needed to\nstore the current jobs.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("binlog-current-index")]),e._v(" is the index of the current binlog file being\nwritten to. If binlog is not active this value will be "),s("code",[e._v("0")]),e._v(".")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("binlog-max-size")]),e._v(" is the maximum size in bytes a binlog file is allowed\nto get before a new binlog file is opened.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("binlog-records-written")]),e._v(" is the cumulative number of records written\nto the binlog.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("binlog-records-migrated")]),e._v(" is the cumulative number of records written\nas part of compaction.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("id")]),e._v(" is a random id string for this server process, generated when each\nbeanstalkd process starts.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("hostname")]),e._v(" the hostname of the machine as determined by uname.")])])]),e._v(" "),s("h3",{attrs:{id:"list-tubes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list-tubes","aria-hidden":"true"}},[e._v("#")]),e._v(" list-tubes")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("list-tubes")]),e._v(" command returns a list of all existing tubes. Its form is:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("list-tubes\\r\\n\n")])])]),s("p",[e._v("The response is:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("OK <bytes>\\r\\n\n<data>\\r\\n\n")])])]),s("ul",[s("li",[s("p",[s("code",[e._v("<bytes>")]),e._v(" is the size of the following data section in bytes.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<data>")]),e._v(" is a sequence of bytes of length "),s("code",[e._v("<bytes>")]),e._v(" from the previous line. It\nis a YAML file containing all tube names as a list of strings.")])])]),e._v(" "),s("h3",{attrs:{id:"list-tube-used"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list-tube-used","aria-hidden":"true"}},[e._v("#")]),e._v(" list-tube-used")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("list-tube-used")]),e._v(" command returns the tube currently being used by the\nclient. Its form is:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("list-tube-used\\r\\n\n")])])]),s("p",[e._v("The response is:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("USING <tube>\\r\\n\n")])])]),s("ul",[s("li",[s("code",[e._v("<tube>")]),e._v(" is the name of the tube being used.")])]),e._v(" "),s("h3",{attrs:{id:"list-tubes-watched"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list-tubes-watched","aria-hidden":"true"}},[e._v("#")]),e._v(" list-tubes-watched")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("list-tubes-watched")]),e._v(" command returns a list tubes currently being watched by\nthe client. Its form is:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("list-tubes-watched\\r\\n\n")])])]),s("p",[e._v("The response is:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("OK <bytes>\\r\\n\n<data>\\r\\n\n")])])]),s("ul",[s("li",[s("p",[s("code",[e._v("<bytes>")]),e._v(" is the size of the following data section in bytes.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<data>")]),e._v(" is a sequence of bytes of length "),s("code",[e._v("<bytes>")]),e._v(" from the previous line. It\nis a YAML file containing watched tube names as a list of strings.")])])]),e._v(" "),s("h3",{attrs:{id:"quit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#quit","aria-hidden":"true"}},[e._v("#")]),e._v(" quit")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("quit")]),e._v(" command simply closes the connection. Its form is:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("quit\\r\\n\n")])])]),s("h3",{attrs:{id:"pause-tube"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pause-tube","aria-hidden":"true"}},[e._v("#")]),e._v(" pause-tube")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("pause-tube")]),e._v(" command can delay any new job being reserved for a given time. Its form is:")]),e._v(" "),s("div",{staticClass:"language-txt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("pause-tube <tube-name> <delay>\\r\\n\n")])])]),s("ul",[s("li",[s("p",[s("code",[e._v("<tube>")]),e._v(" is the tube to pause")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<delay>")]),e._v(" is an integer number of seconds < "),s("code",[e._v("2**32")]),e._v(" to wait before reserving any more\njobs from the queue")])])]),e._v(" "),s("p",[e._v("There are two possible responses:")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("PAUSED\\r\\n")]),e._v(" to indicate success.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("NOT_FOUND\\r\\n")]),e._v(" if the tube does not exist.")])])])])},[],!1,null,null,null);t.default=i.exports}}]);